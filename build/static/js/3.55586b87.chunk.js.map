{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/dashboard/StudentChartShit.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Title","Typography","Text","StudentChartShit","useState","users","setUsers","useEffect","axios","get","then","res","console","log","data","catch","error","gutter","name","initialValues","remember","onFinish","values","post","usersCopy","onFinishFailed","errorInfo","Item","label","rules","required","message","type","htmlType","map","user","index","md","span","className","firstName","lastName","onClick","id","delete","params","filter","danger"],"mappings":"sIAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,G,gGIQtFC,EAAgBC,IAAhBD,MAAgBC,IAATC,KAsGAC,UApGf,WAA6B,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,OAEQF,mBAAS,IAFjB,mBAoD1B,OApD0B,UAI1BG,qBAAU,WAERC,IACGC,IAAI,WACJC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GAEZ,IAAIG,EAAOH,EAAIG,KACfR,EAASQ,MAEVC,OAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,QAC/B,IAsCD,eAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,UACE,eAAC,IAAD,CACEC,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SAxCW,SAACC,GAChBd,IACGe,KAAK,aAAcD,GACnBZ,MAAK,SAACC,GACL,IAAIa,EAAS,EAAOnB,GAEpBmB,EAAS,YAAOA,GAAP,CAAkBb,EAAIG,OAC/BF,QAAQC,IAAIW,GACZlB,EAASkB,MAEVT,OAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,OA+B5BS,eA5BiB,SAACC,GACtBd,QAAQC,IAAI,UAAWa,IAuBrB,UAME,cAAC,IAAKC,KAAN,CACEC,MAAM,aACNV,KAAK,YACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,kCAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,CACEC,MAAM,YACNV,KAAK,WACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKJ,KAAN,UACE,cAAC,IAAD,CAAQK,KAAK,UAAUC,SAAS,SAAhC,yBAMH5B,EAAM6B,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,IAAD,CAAiBC,GAAI,CAAEC,KAAM,GAA7B,SACE,eAAC,IAAD,CAAMC,UAAU,YAAhB,UACE,eAACvC,EAAD,WACGmC,EAAKK,UADR,IACoBL,EAAKM,YAGzB,cAAC,IAAD,CAAQC,QAAS,kBAxDLC,EAwDwBR,EAAKQ,QAvDjDnC,IACGoC,OAAO,gBAAiB,CACvBC,OAAQ,CACNF,QAGHjC,MAAK,SAACC,GACL,IAAIa,EAAS,EAAOnB,GAEpBmB,EAAYA,EAAUsB,QAAO,SAACX,GAAD,OAAUA,EAAKQ,KAAOA,KACnDrC,EAASkB,GAETZ,QAAQC,IAAIW,MAEbT,OAAM,SAACC,GAAD,OAAWJ,QAAQC,IAAIG,MAfb,IAAC2B,GAwDkCI,QAAM,EAApD,wBANMX","file":"static/js/3.55586b87.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Typography,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nfunction StudentChartShit() {\r\n  const [users, setUsers] = useState([]);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // sfsfsdfsdfsdf\r\n    axios\r\n      .get(\"/users/\")\r\n      .then((res) => {\r\n        console.log(res);\r\n\r\n        let data = res.data;\r\n        setUsers(data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const onFinish = (values) => {\r\n    axios\r\n      .post(\"/users/add\", values)\r\n      .then((res) => {\r\n        let usersCopy = [...users];\r\n\r\n        usersCopy = [...usersCopy, res.data];\r\n        console.log(usersCopy);\r\n        setUsers(usersCopy);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    axios\r\n      .delete(\"/users/delete\", {\r\n        params: {\r\n          id,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        let usersCopy = [...users];\r\n\r\n        usersCopy = usersCopy.filter((user) => user.id !== id);\r\n        setUsers(usersCopy);\r\n\r\n        console.log(usersCopy);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <Row gutter={[16, 16]}>\r\n      <Form\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n      >\r\n        <Form.Item\r\n          label=\"First Name\"\r\n          name=\"firstName\"\r\n          rules={[{ required: true, message: \"Please input your First Name!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Last Name\"\r\n          name=\"lastName\"\r\n          rules={[{ required: true, message: \"Please input your last Name!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      {users.map((user, index) => (\r\n        <Col key={index} md={{ span: 6 }}>\r\n          <Card className=\"shadow-sm\">\r\n            <Title>\r\n              {user.firstName} {user.lastName}\r\n            </Title>\r\n\r\n            <Button onClick={() => handleDelete(user.id)} danger>\r\n              Delete\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default StudentChartShit;\r\n"],"sourceRoot":""}